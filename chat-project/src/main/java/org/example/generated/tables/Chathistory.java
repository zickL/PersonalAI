/*
 * This file is generated by jOOQ.
 */
package org.example.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.example.generated.Public;
import org.example.generated.tables.records.ChathistoryRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.chathistory</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chathistory extends TableImpl<ChathistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chathistory</code>
     */
    public static final Chathistory CHATHISTORY = new Chathistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChathistoryRecord> getRecordType() {
        return ChathistoryRecord.class;
    }

    /**
     * The column <code>public.chathistory.id</code>.
     */
    public final TableField<ChathistoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.chathistory.message</code>.
     */
    public final TableField<ChathistoryRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.chathistory.is_user</code>.
     */
    public final TableField<ChathistoryRecord, Boolean> IS_USER = createField(DSL.name("is_user"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.chathistory.timestamp</code>.
     */
    public final TableField<ChathistoryRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Chathistory(Name alias, Table<ChathistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chathistory(Name alias, Table<ChathistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.chathistory</code> table reference
     */
    public Chathistory(String alias) {
        this(DSL.name(alias), CHATHISTORY);
    }

    /**
     * Create an aliased <code>public.chathistory</code> table reference
     */
    public Chathistory(Name alias) {
        this(alias, CHATHISTORY);
    }

    /**
     * Create a <code>public.chathistory</code> table reference
     */
    public Chathistory() {
        this(DSL.name("chathistory"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Chathistory as(String alias) {
        return new Chathistory(DSL.name(alias), this);
    }

    @Override
    public Chathistory as(Name alias) {
        return new Chathistory(alias, this);
    }

    @Override
    public Chathistory as(Table<?> alias) {
        return new Chathistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chathistory rename(String name) {
        return new Chathistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chathistory rename(Name name) {
        return new Chathistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chathistory rename(Table<?> name) {
        return new Chathistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory where(Condition condition) {
        return new Chathistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chathistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chathistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chathistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chathistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chathistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
